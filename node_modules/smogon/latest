#!/usr/bin/env node
'use strict';
// Retrieves information required to power smogon.Statistics#latestDate

const fs = require('fs');
const https = require('https');
const path = require('path');
const url = require('url');

const smogon = require('./dist');

const N = 1e4;

function fetch(u) {
  return new Promise((resolve, reject) => {
    let data = '';
    const req = https.get(u, res => {
      if (res.statusCode !== 200) {
        if (res.statusCode >= 300 && res.statusCode <= 400 && res.headers.location) {
          return resolve(fetch(url.resolve(u, res.headers.location)));
        } else {
          return reject(new Error(`HTTP ${res.statusCode}`));
        }
      }
      res.on('data', d => {
        data += d;
      });
      res.on('end', () => resolve(data));
    });
    req.on('error', reject);
    req.end();
  });
}

(async () => {
  const formats = {};

  const begin = new Date('Nov 2014'); // Nov 2014
  const end = new Date(smogon.Statistics.latest(await fetch(smogon.Statistics.URL)));
  end.setDate(end.getDate() + 1);

  for (const d = begin; d <= end; d.setMonth(d.getMonth() + 1)) {
    const month = `${d.getMonth() + 1}`.padStart(2, '0');
    const date = `${1900 + d.getYear()}-${month}`;
    const page = await fetch(`${smogon.Statistics.URL}${date}/`);

    for (const line of page.split('\n')) {
      const m = line.match(/<a href="(.*)-\d+.txt"/);
      if (m) {
        const format = smogon.Statistics.canonicalize(m[1]);
        if (formats[format] && typeof formats[format][date] === 'number') continue;
        formats[format] = formats[format] || {};
        formats[format][date] = formats[format][date] || [];

        // The JSON files are quite large and needing to download and parse them to then
        // extract the 'number of battles' field is much slower than instead grabbing the
        // basic stats file and doing the comparatively cheap regex search.
        const u = smogon.Statistics.url(date, format, 0).replace('chaos/', '').replace('.json', '.txt');
        const usage = await fetch(u);

        if (usage) {
          // https://www.smogon.com/stats/2016-10/cap-*.txt is invalid and doesn't match... *sigh*
          const m = usage.match(/^ Total battles: (.*)/);
          if (m) formats[format][date] = Number(m[1]);
        }
      }
    }
  }

  const info = {}; // format => [[latest, count], [best, count]] | [latest, count]
  for (const [format, dates] of Object.entries(formats).sort((a, b) => a[0].localeCompare(b[0]))) {
    let latest = [null, 0];
    let best = [null, 0];
    let total = 0;
    let i = 0;
    for (const date in dates) {
      if (!dates[date]) continue;
      total += dates[date];
      i++;

      latest = [date, dates[date]];
      // best = max or latest thats above a threshold
      const threshold = Math.min(N, total/i);
      if (dates[date] >= best[1] || dates[date] > threshold) best = latest;
    }
    if (latest[0]) info[format] = best === latest ? latest : [latest, best];
  }

  fs.writeFileSync(path.resolve(__dirname, 'src', 'latest.json'), JSON.stringify(info));
})().catch(err => console.error(err));
