export declare type ID = '' | (string & {
    __isID: true;
});
export declare type Generation = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
export declare type Type = '???' | 'Normal' | 'Grass' | 'Fire' | 'Water' | 'Electric' | 'Ice' | 'Flying' | 'Bug' | 'Poison' | 'Ground' | 'Rock' | 'Fighting' | 'Psychic' | 'Ghost' | 'Dragon' | 'Dark' | 'Steel' | 'Fairy';
export declare type StatName = 'hp' | 'atk' | 'def' | 'spa' | 'spd' | 'spe';
export declare type StatsTable<T = number> = {
    [stat in StatName]: number;
};
export interface Analysis {
    format: string;
    overview: string;
    comments: string;
    movesets: Moveset[];
    credits: Credits;
}
export interface Moveset {
    name: string;
    description: string;
    level: number;
    abilities: string[];
    items: string[];
    moveslots: Array<Array<{
        move: string;
        type: Type | null;
    }>>;
    evconfigs: StatsTable[];
    ivconfigs: StatsTable[];
    natures: string[];
}
export interface Credits {
    teams: Array<{
        name: string;
        members: Member[];
    }>;
    writtenBy: Member[];
}
export interface Member {
    user_id: number;
    username: string;
}
export interface UsageStatistics {
    info: {
        metagame: string;
        cutoff: number;
        'cutoff deviation': 0;
        'team type': ID | null;
        'number of battles': number;
    };
    data: {
        [name: string]: MovesetStatistics;
    };
}
export interface MovesetStatistics {
    'Raw count': number;
    usage: number;
    'Viability Ceiling': [number, number, number, number];
    Abilities: {
        [ability: string]: number;
    };
    Items: {
        [item: string]: number;
    };
    Spreads: {
        [spread: string]: number;
    };
    Happiness: {
        [happiness: string]: number;
    };
    Moves: {
        [move: string]: number;
    };
    Teammates: {
        [pokemon: string]: number;
    };
    'Checks and Counters': {
        [pokemon: string]: [number, number, number];
    };
}
interface DexSettings {
    injectRpcs: [unknown, // 'dump-gens'
    unknown, // 'dump-basics'
    [string, // key
    {
        strategies: Analysis[];
        [key: string]: unknown;
    }]];
}
export declare const Analyses: {
    readonly URL: "https://www.smogon.com/dex/";
    /**
     * Returns the Analysis URL for a given pokemon and generation.
     */
    url(pokemon: string, gen?: Generation): string;
    /**
     * Parses out the DexSettings object embedded in the raw HTML retrieved from the Smogon dex.
     */
    parse(raw: string): DexSettings | undefined;
    /**
     * Given either the raw HTML retrieved from the Smogon dex or the parsed DexSettings object,
     * returns a map of Analysis objects keyed by format or undefined if its input was invalid.
     */
    process(ds: string | DexSettings): Map<string, Analysis[]> | undefined;
    /**
     * Returns Smogon's display representation of the given gen.
     */
    gen(gen: Generation): string;
};
export declare const Statistics: {
    readonly URL: "https://www.smogon.com/stats/";
    /**
     * Given the HTML page returned from querying the Statistics.URL, returns the most recent
     * date stats are available for. This should usually be the beginning of the current month,
     * but this approach is more robust due to timezone differences and delays in publishing.
     */
    latest(page: string): string;
    /**
     * Returns the URL of the detailed ('chaos') stats for the given date and format, defaulting
     * to providing the highest weighted stats available for the format in question. Unweighted
     * stats or stats of a specific weight may also be requested, though may be absent depending
     * on the date and format.
     */
    url(date: string, format: string, weighted?: number | boolean): string;
    /**
     * Returns the date and count of the latest stats available for the given format at the time
     * this package was published. If best is provided, it will return the date and count for the
     * most recent month where a substantial enough amount of data was gathered. Returns undefined
     * if there is no data present. Note the accuracy of this function depends on the data in
     * latest.json being kept up to date.
     */
    latestDate(format: string, best?: boolean): {
        date: string;
        count: number;
    } | undefined;
    /**
     * Returns the canconical format name for the given format.
     */
    canonicalize(format: string): string;
    /**
     * Processes what was fetched from the URL returned by Statistics.url into UsageStatistics.
     */
    process(raw: string): UsageStatistics;
};
export {};
